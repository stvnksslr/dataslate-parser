[project]
name = "dataslate-parser"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aiofiles>=24.1.0",
    "beautifulsoup4>=4.12.3",
    "fastapi>=0.111.0",
    "httpx>=0.27.0",
    "jinja2-fragments>=1.4.0",
    "jinja2>=3.1.4",
    "lxml>=5.2.2",
    "pydantic>=2.8.0",
    "python-multipart>=0.0.9",
    "uvicorn>=0.30.1",
    "loguru>=0.7.2",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.23.7",
    "pytest-clarity>=1.0.1",
    "pytest-cov>=5.0.0",
    "pytest-random-order>=1.1.1",
    "pytest-sugar>=1.0.0",
    "pytest>=8.2.2",
    "mypy>=1.11.1",
    "pre-commit>=3.8.0",
    "ruff>=0.8.0",
    "types-beautifulsoup4>=4.12.0.20240511",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-vv --random-order"

[tool.coverage.run]
omit = [
    '*/.local/*',
    '__init__.py',
    'tests/*',
    '*/tests/*',
    '.venv/*',
    '*/migrations/*',
    '*_test.py',
    "src/utils/logger_manager.py",
]

[tool.ruff]
line-length = 120
exclude = [
    ".eggs",
    ".git",
    ".pytype",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    ".venv",
]
lint.ignore = [
    "B008",    # function-call-in-default-argument (B008)
    "S101",    # Use of `assert` detected
    "RET504",  # Unnecessary variable assignment before `return` statement
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "ARG001",  # Unused function argument: `{name}`
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "ISC001",  # Checks for implicitly concatenated strings on a single line
]
lint.select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "E",   # pycodestyle
    "F",   # Pyflakes
    "N",   # pep8-naming
    "RET", # flake8-return
    "S",   # flake8-bandit
    "W",   # pycodestyle
    "Q",   # flake8-quotes
    "C90", # mccabe
    "I",   # isort
    "UP",  # pyupgrade
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PT",  # flake8-pytest-style
    "PIE", # flake8-pie
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "NPY", # NumPy-specific rules
    "PLE", # Pylint
    "PLR", # Pylint
    "PLW", # Pylint
    "RUF", # Ruff-specific rules
    "PD",  # pandas-vet
]
