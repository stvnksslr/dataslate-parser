[tool.poetry]
name = "dataslate-parser"
version = "1.3.0"
description = "a module for parsing battlescribe rosters and allowing them to be printed or displayed cleanly"
authors = ["Steven Kessler <stvnksslr@gmail.com>"]
license = "MIT"


[tool.poetry.dependencies]
python = "^3.11"
beautifulsoup4 = "^4.12.2"
lxml = "^4.9.3"
fastapi = "^0.104.0"
aiofiles = "^23.2.1"
jinja2 = "^3.1.2"
jinja2-fragments = "^1.2.1"
python-multipart = "^0.0.6"
loguru = "^0.7.2"
uvicorn = { extras = ["standard"], version = "^0.23.2" }
httpx = "^0.25.0"
pydantic = "^2.4.2"
pytailwindcss = "^0.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-sugar = "^0.9.7"
pytest-asyncio = "^0.21.1"
pytest-clarity = "^1.0.1"
pytest-random-order = "^1.1.0"

[tool.poetry.group.code-quality.dependencies]
ruff = "^0.1.3"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-vv --random-order"

[tool.ruff]
line-length = 120
ignore = [
  "B008",    # function-call-in-default-argument (B008)
  "S101",    # Use of `assert` detected
  "RET504",  # Unnecessary variable assignment before `return` statement
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "ARG001",  # Unused function argument: `{name}`
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]
select = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "E",   # pycodestyle
  "F",   # Pyflakes
  "N",   # pep8-naming
  "RET", # flake8-return
  "S",   # flake8-bandit
  "W",   # pycodestyle
  "Q",   # flake8-quotes
  "C90", # mccabe
  "I",   # isort
  "UP",  # pyupgrade
  "BLE", # flake8-blind-except
  "C4",  # flake8-comprehensions
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "PT",  # flake8-pytest-style
  "PIE", # flake8-pie
  "T20", # flake8-print
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "PL",  # Pylint
  "NPY", # NumPy-specific rules
  "PLE", # Pylint
  "PLR", # Pylint
  "PLW", # Pylint
  "RUF", # Ruff-specific rules
  "PD",  # pandas-vet
]
exclude = [
  ".eggs",
  ".git",
  ".pytype",
  ".ruff_cache",
  ".venv",
  "__pypackages__",
  ".venv",
]


[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )
)
'''
